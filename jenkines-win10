#!/bin/bash
#操作/项目路径(Dockerfile存放的路劲)/var/jenkins_home/workspace/dockerfile/yg-weight
BASE_PATH=/var/jenkins_home/workspace/dockerfile/yg-weight
# 源jar路径
SOURCE_PATH=/var/jenkins_home/workspace
#docker 镜像/容器名字或者jar名字 这里都命名为这个
SERVER_NAME=yg-weight
JAR_NAME=yg-weight
#容器id
CID=$(docker ps | grep "$SERVER_NAME" | awk '{print $1}')
#镜像id
IID=$(docker images | grep "$SERVER_NAME" | awk '{print $3}')

DATE=`date +%Y%m%d%H%M`

# 最新构建代码 移动到项目环境
function transfer(){
    echo "最新构建代码 $SOURCE_PATH/$SERVER_NAME/target/$JAR_NAME.jar 迁移至 $BASE_PATH ...."
        cp $SOURCE_PATH/$SERVER_NAME/target/$JAR_NAME.jar $BASE_PATH
    echo "迁移完成"
}

# 备份
function backup(){
	if [ -f "$BASE_PATH/$JAR_NAME.jar" ]; then
    	echo "$JAR_NAME.jar 备份..."
        	cp $BASE_PATH/$JAR_NAME.jar $BASE_PATH/backup/$SERVER_NAME-$DATE.jar
        echo "备份 $JAR_NAME.jar 完成"
    else
    	echo "$BASE_PATH/$JAR_NAME.jar不存在，跳过备份"
    fi
}

# 构建docker镜像
function build(){
	if [ -n "$IID" ]; then
		echo "存在$SERVER_NAME镜像，IID=$IID,停止并删除旧的容器"
			 set -e; docker stop $SERVER_NAME && docker rm $SERVER_NAME || EXIT_CODE=$? && true;
             echo "删除旧的镜像"
			  set -e; docker rmi $SERVER_NAME || EXIT_CODE=$? && true;
             echo "删除旧的镜像成功,开始构造镜像"
              cd $BASE_PATH
             docker build -t $SERVER_NAME -f $BASE_PATH/Dockerfile .
        echo "存在$SERVER_NAME镜像,重新构造完成"
	else
		echo "不存在$SERVER_NAME镜像，开始构建镜像"
			cd $BASE_PATH
		docker build -t $SERVER_NAME -f $BASE_PATH/Dockerfile .
	fi
}

# 运行docker容器
function run(){
	backup
	transfer
	build
	if [ -n "$CID" ]; then
		echo "存在$JAR_NAME容器，CID=$CID,重启重新构建后的docker容器 ..."
 			 docker run -it -d --restart=always --name $SERVER_NAME -v D:/java/logs/yg_weight:/logs/yg_weight -p 8083:8083 $SERVER_NAME
		echo "$SERVER_NAME容器重启完成"
	else
		echo "不存在$SERVER_NAME容器，docker run创建容器..."
#			docker run --name $SERVER_NAME -d -p 8082:8082 $SERVER_NAME
            docker run -it -d --restart=always --name $SERVER_NAME -v D:/java/logs/yg_weight:/logs/yg_weight -p 8083:8083 $SERVER_NAME
		echo "$SERVER_NAME容器创建完成"
	fi
}

#入口
run